[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Raymond. Author, maintainer. Adrien Ickowicz. Author. openvolley.org. Originator.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raymond B, Ickowicz (2022). ovlytics: Functions Algorithms Volleyball Analytics. R package version 0.2.5.","code":"@Manual{,   title = {ovlytics: Functions and Algorithms for Volleyball Analytics},   author = {Ben Raymond and Adrien Ickowicz},   year = {2022},   note = {R package version 0.2.5}, }"},{"path":"/index.html","id":"ovlytics","dir":"","previous_headings":"","what":"Functions and Algorithms for Volleyball Analytics","title":"Functions and Algorithms for Volleyball Analytics","text":"ovlytics package collection functions volleyball analytics. mixture general support functions (data handling, augmentation) along specific analysis methods (e.g. setter choice analysis).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions and Algorithms for Volleyball Analytics","text":"","code":"options(repos = c(openvolley = \"https://openvolley.r-universe.dev\",                   CRAN = \"https://cloud.r-project.org\")) install.packages(\"ovlytics\")  ## or  ## install.packages(\"remotes\") ## if needed remotes::install_github(\"openvolley/ovlytics\")"},{"path":"/reference/attack_eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Various skill performance indicators — attack_eff","title":"Various skill performance indicators — attack_eff","text":"attack_eff: (number kills - number errors blocked attacks) / (number attacks) serve_eff: (number aces positive serves - number errors poor serves) / (number serves) reception_eff: (number perfect positive passes - number errors overpasses) / (number passes)","code":""},{"path":"/reference/attack_eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various skill performance indicators — attack_eff","text":"","code":"attack_eff(evaluation, skill)  serve_eff(evaluation, skill)  reception_eff(evaluation, skill)"},{"path":"/reference/attack_eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various skill performance indicators — attack_eff","text":"evaluation character: vector skill evaluations (\"Winning attack\", \"Error\", etc) skill character: (optional) vector skill values (\"Attack\", \"Block\", etc). provided, used filter evaluation vector elements corresponding correct skill. provided, elements evaluation used","code":""},{"path":"/reference/attack_eff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various skill performance indicators — attack_eff","text":"numeric scalar","code":""},{"path":"/reference/attack_eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various skill performance indicators — attack_eff","text":"","code":"if (FALSE) {  library(dplyr)  x <- ovdata_example(\"mlafin_braslovce_nkbm\", as = \"parsed\")  plays(x) %>% dplyr::filter(skill == \"Attack\") %>% group_by(player_name) %>%    dplyr::summarize(N_attacks = n(), att_eff = attack_eff(evaluation)) }"},{"path":"/reference/ov_augment_plays.html","id":null,"dir":"Reference","previous_headings":"","what":"Add some extra columns to a plays object — ov_augment_plays","title":"Add some extra columns to a plays object — ov_augment_plays","text":"Add extra columns plays object","code":""},{"path":"/reference/ov_augment_plays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add some extra columns to a plays object — ov_augment_plays","text":"","code":"ov_augment_plays(   x,   to_add = c(\"receiving_team\", \"touch_summaries\", \"setters\"),   use_existing = TRUE )"},{"path":"/reference/ov_augment_plays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add some extra columns to a plays object — ov_augment_plays","text":"x data.frame: plays data.frame returned datavolley::read_dv() peranavolley::pv_read() to_add character: columns add \"receiving_team\" adds columns \"receiving_team\" (team name) \"receiving_team_id\" \"winners\" adds columns \"set_won_by\", \"set_won_by_id\" (name ID team won current set), \"match_won_by\", \"match_won_by_id\" (name ID team won current match), \"team_won_set\" \"team_won_match\" (team making action current row win set/match), \"home_sets_won\" \"visiting_sets_won\" (number sets won home visiting teams) \"touch_summaries\" adds number columns named \"ts_*\" summarize team touch (e.g. columns \"ts_pass_quality\", \"ts_pass_evaluation_code\" give pass quality pass evaluation code reception dig associated given team touch) \"setters\" adds columns \"home_setter_id\", \"visiting_setter_id\" (player IDs home visiting setter court), \"setter_id\", \"setter_position\", \"setter_front_back\" (player ID position setter team performing current action) \"followed\" adds columns \"followed_timeout\", \"followed_technical_timeout\", \"followed_sub\" \"\" shortcut use_existing logical: TRUE columns associated given to_add choice already present x, re-generated","code":""},{"path":"/reference/ov_augment_plays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add some extra columns to a plays object — ov_augment_plays","text":"x extra columns added","code":""},{"path":"/reference/ov_create_history_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"Create prior table dvw directory dvw files","code":""},{"path":"/reference/ov_create_history_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"","code":"ov_create_history_table(   dvw,   play_phase = c(\"Reception\", \"Transition\"),   attack_by = \"code\",   setter_position_by = \"rotation\",   exclude_attacks = c(\"PR\"),   normalize_parameters = TRUE )"},{"path":"/reference/ov_create_history_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"dvw string: path one datavolley files, list one datavolley objects, directory containing datavolley files play_phase character: one \"Reception\", \"Transition\" attack_by string: either \"code\", \"zone\", \"tempo\" \"setter call\" setter_position_by string: either \"rotation\", \"front_back\" exclude_attacks character: vector attack codes exclude normalize_parameters logical: reduce prior parameter values","code":""},{"path":"/reference/ov_create_history_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"list, currently one component named \"prior_table\"","code":""},{"path":"/reference/ov_create_history_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"","code":"## use this file to create the priors hist_dvw <- ovdata_example(\"190301_kats_beds\") history_table <- ov_create_history_table(dvw = hist_dvw, attack_by = \"setter call\",                                    setter_position_by = \"front_back\")  ## use it on another file (here, the same file for demo purposes) ## usually the history would be from a reference set of previous matches  dvw <- ovdata_example(\"190301_kats_beds\") setter <- ov_simulate_setter_distribution(dvw = dvw, play_phase = \"Reception\", n_sim = 100,                                   attack_by = \"setter call\", attack_options = \"use_history\",                                   setter_position_by = \"front_back\",                                   history_table = history_table, filter_sim = TRUE)  ## plot the results ov_plot_ssd(setter, overlay_set_number = TRUE)  ov_plot_distribution(setter) #> Warning: Removed 2 rows containing missing values (geom_tile). #> Warning: Removed 2 rows containing missing values (geom_text)."},{"path":"/reference/ov_example_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"Example DataVolley files provided part ovlytics package","code":""},{"path":"/reference/ov_example_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"","code":"ov_example_file(choice = \"190301_kats_beds\")"},{"path":"/reference/ov_example_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"choice string: data file return? \"190301_kats_beds\" - match GKS Katowice MKS Bedzin 2018/19 Polish Plus Liga","code":""},{"path":"/reference/ov_example_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"path file","code":""},{"path":"/reference/ov_example_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"","code":"myfile <- ov_example_file() x <- dv_read(myfile) summary(x) #> Match summary: #> Date: 2019-01-03 #> League: Plus Liga 2018/2019 - Plus Liga 2018/20189- Faza Zasadnicza #> Teams: GKS Katowice (Gruszka Piotr/Słaby Grzegorz) #>        vs #>        MKS Będzin (Siewiorek Emil) #> Result: 3-2 (25-20, 18-25, 25-15, 19-25, 15-6) #> Duration: 114 minutes"},{"path":"/reference/ov_heatmap_kde.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"Kernel density estimates volleyball heatmaps","code":""},{"path":"/reference/ov_heatmap_kde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"","code":"ov_heatmap_kde(   x,   y,   N = NULL,   resolution = \"coordinates\",   bw,   n,   court = \"full\",   auto_flip = FALSE )"},{"path":"/reference/ov_heatmap_kde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"x : either numeric vector x-locations, three-column data.frame matrix columns x, y, optionally N. x grouped tibble, kernel density estimates calculated separately group y numeric: (unless x data.frame matrix) numeric vector y-locations N numeric: (unless x data.frame matrix) numeric vector counts associated location (corresponding location observed N times) resolution string: resolution locations, either \"coordinates\" \"subzones\" bw numeric: vector bandwidths use x- y-directions (see MASS::kde2d()). provided, default values used based location resolution n integer: (scalar length-2 integer vector) number grid points direction. provided, 60 points x-direction 60 (half-court) 120 points y-direction used court string: \"full\" (generate kernel density estimate full court) \"lower\" \"upper\" (lower upper half court) auto_flip logical: TRUE, court either \"lower\" \"upper\", locations corresponding non-selected half court flipped. might appropriate , example, heatmap represents attack end locations scouted coordinates (necessarily aligned end court default)","code":""},{"path":"/reference/ov_heatmap_kde.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"data.frame columns x, y, density","code":""},{"path":"/reference/ov_heatmap_kde.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"","code":"library(ggplot2) library(datavolley)  ## Example 1 - by coordinates ## generate some fake coordinate data Na <- 20 set.seed(17) px <- data.frame(x = c(runif(Na, min = 0.4, max = 1.2), runif(Na, min = 2, max = 3)),                  y = c(runif(Na, min = 4.5, max = 6.6), runif(Na, min = 4.9, max = 6.6)))  ## plot as points ggplot(px, aes(x, y)) + ggcourt(labels = NULL, court = \"upper\") +        geom_point(colour = \"dodgerblue\")   ## or as a heatmap hx <- ov_heatmap_kde(px, resolution = \"coordinates\", court = \"upper\") #> Warning: row names were found from a short variable and have been discarded ggplot(hx, aes(x, y, fill = density)) +        scale_fill_distiller(palette = \"Purples\", direction = 1, labels = NULL,                             name = \"Attack\\ndensity\") +        geom_raster() + ggcourt(labels = NULL, court = \"upper\")   ## Example 2 - by subzones, with data from two attackers ## generate some fake data Na <- 20 set.seed(17) px <- data.frame(zone = sample(c(1, 5:9), Na * 2, replace = TRUE),                  subzone = sample(c(\"A\", \"B\", \"C\", \"D\"), Na * 2, replace = TRUE),                  attacker = c(rep(\"Attacker 1\", Na), rep(\"Attacker 2\", Na)))  ## convert to x, y coordinates px <- cbind(px, dv_xy(zones = px$zone, end = \"upper\", subzone = px$subzone))  ## plot as tiles library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union ggplot(count(px, attacker, x, y), aes(x, y, fill = n)) + geom_tile() +        facet_wrap(~attacker) + ggcourt(labels = NULL, court = \"upper\")   ## or as a heatmap, noting that we group the data by attacker first hx <- ov_heatmap_kde(group_by(px, attacker), resolution = \"subzones\", court = \"upper\") ggplot(hx, aes(x, y, fill = density)) + facet_wrap(~attacker) +        scale_fill_distiller(palette = \"Purples\", direction = 1, labels = NULL,                             name = \"Attack\\ndensity\") +        geom_raster() + ggcourt(labels = NULL, court = \"upper\")"},{"path":"/reference/ov_infer_player_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer the role of each player — ov_infer_player_roles","title":"Infer the role of each player — ov_infer_player_roles","text":"Infer role player","code":""},{"path":"/reference/ov_infer_player_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer the role of each player — ov_infer_player_roles","text":"","code":"ov_infer_player_roles(   x,   target_team,   method,   fall_back = TRUE,   setter_tip_codes = c(\"PP\") )"},{"path":"/reference/ov_infer_player_roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer the role of each player — ov_infer_player_roles","text":"x : datavolley object (returned datavolley::dv_read()), list datavolley objects, plays component datavolley object target_team string function: team report . function, return TRUE passed target team name method string: \"meta\" (rely player metadata), \"SHM\" (assume setter-hitter-middle rotation order), \"SMH\" (setter-middle-hitter), \"data\" (figure positions scouting data). Method \"meta\" default datavolley object list objects provided fall_back logical: TRUE method \"meta\" x single datavolley object player roles provided DataVolley file metadata section, fall back method=\"data\" setter_tip_codes character: vector attack combination codes correspond setter tips","code":""},{"path":"/reference/ov_infer_player_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer the role of each player — ov_infer_player_roles","text":"data.frame","code":""},{"path":"/reference/ov_infer_player_roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer the role of each player — ov_infer_player_roles","text":"","code":"x <- ovdata_example(\"mlafin_braslovce_nkbm\", as = \"parsed\") ## guess roles according to the actions that the players made rx <- ov_infer_player_roles(x, target_team = \"Nova KBM Branik\", method = \"data\")"},{"path":"/reference/ov_plot_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Court plot of a real and simulated setter distribution — ov_plot_distribution","title":"Court plot of a real and simulated setter distribution — ov_plot_distribution","text":"Court plot real simulated setter distribution","code":""},{"path":"/reference/ov_plot_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Court plot of a real and simulated setter distribution — ov_plot_distribution","text":"","code":"ov_plot_distribution(   ssd,   label_setters_by = \"id\",   font_size = 11,   title_wrap = NA,   output = \"plot\" )"},{"path":"/reference/ov_plot_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Court plot of a real and simulated setter distribution — ov_plot_distribution","text":"ssd simulated setter distribution output returned ov_simulate_setter_distribution() label_setters_by string: either \"id\" \"name\" font_size numeric: font size title_wrap numeric: non-NA, use strwrap() break title lines width output string: either \"plot\" \"list\"","code":""},{"path":"/reference/ov_plot_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Court plot of a real and simulated setter distribution — ov_plot_distribution","text":"","code":"dvw <- ovdata_example(\"190301_kats_beds\") setter <- ov_simulate_setter_distribution(dvw = dvw, play_phase = c(\"Reception\", \"Transition\"),                                           n_sim = 100, attack_by = \"code\") ov_plot_distribution(setter)"},{"path":"/reference/ov_plot_history_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the prior table — ov_plot_history_table","title":"Plot the prior table — ov_plot_history_table","text":"Plot prior table","code":""},{"path":"/reference/ov_plot_history_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the prior table — ov_plot_history_table","text":"","code":"ov_plot_history_table(history_table, team, setter_id)"},{"path":"/reference/ov_plot_history_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the prior table — ov_plot_history_table","text":"history_table data.frame: prior_table component object returned ov_create_history_table() team string: team name setter_id string: setter_id","code":""},{"path":"/reference/ov_plot_history_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the prior table — ov_plot_history_table","text":"","code":"hist_dvw <- ovdata_example(\"190301_kats_beds\") history_table <- ov_create_history_table(dvw = hist_dvw, attack_by = \"tempo\",                                                     setter_position_by = \"front_back\",                                                     normalize_parameters = FALSE) team = unique(history_table$prior_table$team)[1] setter_id = unique(history_table$prior_table$setter_id)[4] ov_plot_history_table(history_table, team, setter_id) #> Joining, by = c(\"setter_front_back\", \"skill_type\")"},{"path":"/reference/ov_plot_sequence_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","title":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","text":"Plot simulated setter distribution sequence","code":""},{"path":"/reference/ov_plot_sequence_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","text":"","code":"ov_plot_sequence_distribution(   ssd,   label_setters_by = \"id\",   font_size = 11,   title_wrap = NA,   split_set = FALSE,   output = \"plot\" )"},{"path":"/reference/ov_plot_sequence_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","text":"ssd simulated setter distribution output returned ov_simulate_setter_distribution() label_setters_by string: either \"id\" \"name\" font_size numeric: font size title_wrap numeric: non-NA, use strwrap() break title lines width split_set boolean: TRUE, separate distribution sequence set output string: either \"plot\" \"list\"","code":""},{"path":"/reference/ov_plot_sequence_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","text":"","code":"dvw <- ovdata_example(\"190301_kats_beds\") ssd <- ov_simulate_setter_distribution(dvw = dvw, play_phase = c(\"Reception\"),                                        n_sim = 100, attack_by = \"zone\",                                        setter_position_by = \"front_back\") ov_plot_sequence_distribution(ssd) #> Warning: Removed 200 rows containing missing values (geom_point). #> Warning: Removed 284 rows containing missing values (geom_point)."},{"path":"/reference/ov_plot_ssd.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a simulated setter distribution — ov_plot_ssd","title":"Plot a simulated setter distribution — ov_plot_ssd","text":"Plot simulated setter distribution","code":""},{"path":"/reference/ov_plot_ssd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a simulated setter distribution — ov_plot_ssd","text":"","code":"ov_plot_ssd(   ssd,   overlay_set_number = FALSE,   label_setters_by = \"name\",   font_size = 11 )"},{"path":"/reference/ov_plot_ssd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a simulated setter distribution — ov_plot_ssd","text":"ssd simulated setter distribution output returned ov_simulate_setter_distribution() overlay_set_number boolean: TRUE, overlay set number score plot label_setters_by string: either \"id\" \"name\" font_size numeric: font size","code":""},{"path":"/reference/ov_plot_ssd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a simulated setter distribution — ov_plot_ssd","text":"","code":"dvw <- ovdata_example(\"190301_kats_beds\") setter <- ov_simulate_setter_distribution(dvw = dvw,                                           n_sim = 150, attack_by = \"zone\") ov_plot_ssd(setter, overlay_set_number = TRUE)"},{"path":"/reference/ov_print_history_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the prior table — ov_print_history_table","title":"Print the prior table — ov_print_history_table","text":"Print prior table","code":""},{"path":"/reference/ov_print_history_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the prior table — ov_print_history_table","text":"","code":"ov_print_history_table(history_table, team, setter_id)"},{"path":"/reference/ov_print_history_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the prior table — ov_print_history_table","text":"history_table data.frame: prior_table component object returned ov_create_history_table() team string: team name setter_id string: setter_id","code":""},{"path":"/reference/ov_print_history_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the prior table — ov_print_history_table","text":"","code":"hist_dvw <- ovdata_example(\"190301_kats_beds\") history_table <- ov_create_history_table(dvw = hist_dvw, attack_by = \"zone\") team = history_table$prior_table$team[1] setter_id = history_table$prior_table$setter_id[1] ov_print_history_table(history_table, team, setter_id) #> Warning: The `fmt_missing()` function is deprecated and will soon be removed #> * Use the `sub_missing()` function instead #> <div id=\"stemainzdu\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #stemainzdu .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #stemainzdu .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #stemainzdu .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #stemainzdu .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #stemainzdu .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #stemainzdu .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #stemainzdu .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #stemainzdu .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #stemainzdu .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #stemainzdu .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #stemainzdu .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #stemainzdu .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #stemainzdu .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #stemainzdu .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #stemainzdu .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #stemainzdu .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #stemainzdu .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #stemainzdu .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #stemainzdu .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #stemainzdu .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #stemainzdu .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #stemainzdu .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #stemainzdu .gt_left { #>   text-align: left; #> } #>  #> #stemainzdu .gt_center { #>   text-align: center; #> } #>  #> #stemainzdu .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #stemainzdu .gt_font_normal { #>   font-weight: normal; #> } #>  #> #stemainzdu .gt_font_bold { #>   font-weight: bold; #> } #>  #> #stemainzdu .gt_font_italic { #>   font-style: italic; #> } #>  #> #stemainzdu .gt_super { #>   font-size: 65%; #> } #>  #> #stemainzdu .gt_two_val_uncert { #>   display: inline-block; #>   line-height: 1em; #>   text-align: right; #>   font-size: 60%; #>   vertical-align: -0.25em; #>   margin-left: 0.1em; #> } #>  #> #stemainzdu .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #stemainzdu .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #stemainzdu .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #stemainzdu .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #stemainzdu .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>    #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\"><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\">2<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\">8<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\">9<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\">4<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\">3<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">4<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right gt_stub\">Perfect<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right gt_stub\">Good<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right gt_stub\">Poor<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">5<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right gt_stub\">Perfect<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right gt_stub\">Poor<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">6<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right gt_stub\">Perfect<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right gt_stub\">Good<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right gt_stub\">OK<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0.0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right gt_stub\">Poor<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">1<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right gt_stub\">Good<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0.5<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">2<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right gt_stub\">Good<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><td class=\"gt_row gt_right gt_stub\">Poor<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <td colspan=\"6\" class=\"gt_group_heading\">3<\/td> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><td class=\"gt_row gt_right gt_stub\">Poor<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0<\/td> #> <td class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>"},{"path":"/reference/ov_season_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary table of a team's matches in a season — ov_season_table","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"Create summary table team's matches season","code":""},{"path":"/reference/ov_season_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"","code":"ov_season_table(xl, target_team, target_team_id, show_by = \"match date\")"},{"path":"/reference/ov_season_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"xl list: list datavolley objects (returned datavolley::dv_read() target_team string: name target team. one target_team target_team_id required target_team_id string: team ID target team. Ignored target_team provided show_by string: either \"match date\" (show match according date) \"filename\" (show match according filename. might useful match dates parsed incorrectly datavolley::dv_read())","code":""},{"path":"/reference/ov_season_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"tibble columns \"Opponent\", \"Date\" (\"File\"), \"Result\", \"Set scores\", one column sets 1 5","code":""},{"path":"/reference/ov_season_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"","code":"## trivial example of a single-match \"season\" library(datavolley) x <- dv_read(dv_example_file()) ov_season_table(list(x), target_team = home_team(x)) #> # A tibble: 1 × 10 #>   Opponent        Date       Result Set sc…¹ `W/L` `1`   `2`   `3`   `4`   `5`   #>   <chr>           <date>     <chr>  <chr>    <lgl> <chr> <chr> <chr> <chr> <chr> #> 1 Nova KBM Branik 2015-01-25 3-0    25-16, … TRUE  S-3*  R-3*  S-3*  -     -     #> # … with abbreviated variable name ¹​`Set scores`"},{"path":"/reference/ov_setter_repetition.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate setter repeat patterns — ov_setter_repetition","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"Note: analysis done basis attack actions, simply assumes setter court made set.","code":""},{"path":"/reference/ov_setter_repetition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"","code":"ov_setter_repetition(   x,   setter_id,   setter_name,   exclude_attacks = c(\"PP\", \"PR\", \"P2\"),   exclude_negative_reception = TRUE,   exclude_highballs = FALSE )"},{"path":"/reference/ov_setter_repetition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"x data.frame: plays data.frame returned datavolley::read_dv() peranavolley::pv_read() setter_id string: (optional) player ID setter analyze (provide setter_name). neither setter_id setter_name provided, setters analyzed separately, collated results returned setter_name string: (optional) name setter analyze (ignored setter_id provided). neither setter_id setter_name provided, setters analyzed separately, collated results returned exclude_attacks character: vector attack codes exclude exclude_negative_reception logical: TRUE, exclude attacks following poor reception (likely --system therefore might represent attacks setter genuine options) exclude_highballs logical: TRUE, exclude highball attacks (likely --system therefore might represent attacks setter genuine options)","code":""},{"path":"/reference/ov_setter_repetition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"data.frame columns \"team\", \"setter_name\", \"setter_id\", \"player_name\", \"player_id\", \"category\", \"opportunities\", \"repeats\", \"repeat%\"","code":""},{"path":"/reference/ov_setter_repetition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"","code":"x <- plays(ovdata_example(\"190301_kats_beds\", as = \"parsed\")) set_reps <- ov_setter_repetition(x, setter_name = \"Lukas Tichacek\")  library(ggplot2) ggplot(set_reps, aes(x = player_name, y = `repeat%`)) + geom_col() +     geom_text(aes(x = player_name, label = paste0(\"N=\", opportunities)),               angle = 90, y = 100, hjust = 1, inherit.aes = FALSE) +     facet_wrap(~category) +     theme_bw() +     theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +     labs(x = NULL, y = \"Repeat percentage\") #> Warning: Removed 11 rows containing missing values (position_stack)."},{"path":"/reference/ov_simulate_setter_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","text":"Simulate Bayesian Bandit choice given set probabilities number points","code":""},{"path":"/reference/ov_simulate_setter_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","text":"","code":"ov_simulate_setter_distribution(   dvw,   play_phase = c(\"Reception\", \"Transition\"),   n_sim = 500,   priors = list(name = \"beta\", par1 = 1, par2 = 1),   epsilon = 1,   filter_sim = FALSE,   attack_options = \"use_data\",   setter_position_by = \"rotation\",   history_table = NULL,   attack_by = \"code\",   exclude_attacks = c(\"PR\"),   shiny_progress = NULL )"},{"path":"/reference/ov_simulate_setter_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","text":"dvw string datavolley: datavolley object returned datavolley::dv_read() path datavolley file play_phase character: one \"Reception\", \"Transition\" n_sim integer: number simulations priors numeric: prior distribution kill rate different attacking options epsilon numeric: reward size filter_sim logical: attack_options string: either \"use_data\" \"use_history\" setter_position_by string: either \"rotation\" \"front_back\" history_table list: (attack_options \"use_history\") object returned ov_create_history_table() attack_by string: either \"code\", \"zone\", \"tempo\", \"setter call\" exclude_attacks character: vector attack codes exclude shiny_progress numeric: optional two-element vector. NULL NA, shiny::setProgress() calls made simulation values range","code":""},{"path":[]},{"path":"/reference/ov_simulate_setter_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","text":"","code":"dvw <- ovdata_example(\"190301_kats_beds\") system.time({   ssd <- ov_simulate_setter_distribution(dvw = dvw, play_phase = \"Reception\",                                          n_sim = 100, attack_by = \"setter call\",                                          setter_position_by = \"front_back\") }) #>    user  system elapsed  #>   3.037   0.028   3.055"},{"path":"/reference/ov_sort_attack_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort DataVolley attack codes — ov_sort_attack_codes","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"Sort DataVolley attack codes","code":""},{"path":"/reference/ov_sort_attack_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"","code":"ov_sort_attack_codes(ac, by = \"XV\", na.last = NA)"},{"path":"/reference/ov_sort_attack_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"ac character: character vector attack codes sort string: method use, currently \"XV\" (value default back using sort without modification). \"XV\" place X V codes first (numerical order, X preceding matching V) everything else alphabetical order na.last logical: passed sort","code":""},{"path":"/reference/ov_sort_attack_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"Sorted character vector","code":""},{"path":"/reference/ov_sort_attack_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"","code":"ov_sort_attack_codes(c(\"V5\", \"V1\", \"X6\", \"CF\", \"X5\")) #> [1] \"V1\" \"X5\" \"V5\" \"X6\" \"CF\"  if (FALSE) {   ## sorting might be useful for controlling the plot order when facetting   ##  a `ggplot` by attack code   mydata$attack_code <- factor(mydata$attack_code,             levels = ov_sort_attack_codes(unique(na.omit(mydata$attack_code))))   ggplot(mydata, ...) + facet_wrap(~attack_code) }"},{"path":"/reference/ovlytics.html","id":null,"dir":"Reference","previous_headings":"","what":"ovlytics — ovlytics","title":"ovlytics — ovlytics","text":"Analytical functions volleyball analytics, used conjunction datavolley peranavolley packages.","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. datavolley dv_read, plays dplyr %>% ovdata ovdata_example","code":""}]
