[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Raymond. Author, maintainer. Adrien Ickowicz. Author. openvolley.org. Originator.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raymond B, Ickowicz (2024). ovlytics: Functions Algorithms Volleyball Analytics. R package version 0.3.0, https://github.com/openvolley/ovlytics, https://ovlytics.openvolley.org.","code":"@Manual{,   title = {ovlytics: Functions and Algorithms for Volleyball Analytics},   author = {Ben Raymond and Adrien Ickowicz},   year = {2024},   note = {R package version 0.3.0, https://github.com/openvolley/ovlytics},   url = {https://ovlytics.openvolley.org}, }"},{"path":"/index.html","id":"ovlytics","dir":"","previous_headings":"","what":"Functions and Algorithms for Volleyball Analytics","title":"Functions and Algorithms for Volleyball Analytics","text":"ovlytics package collection functions volleyball analytics. mixture general support functions (data handling, augmentation) along specific analysis methods (e.g. setter choice analysis).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions and Algorithms for Volleyball Analytics","text":"","code":"options(repos = c(openvolley = \"https://openvolley.r-universe.dev\",                   CRAN = \"https://cloud.r-project.org\")) install.packages(\"ovlytics\")  ## or  ## install.packages(\"remotes\") ## if needed remotes::install_github(\"openvolley/ovlytics\")"},{"path":"/reference/attack_eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Various skill performance indicators — attack_eff","title":"Various skill performance indicators — attack_eff","text":"attack_eff: (number kills - number errors blocked attacks) / (number attacks) serve_eff: (number aces positive serves - number errors poor serves) / (number serves) reception_eff: (number perfect positive passes - number errors overpasses) / (number passes)","code":""},{"path":"/reference/attack_eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various skill performance indicators — attack_eff","text":"","code":"attack_eff(evaluation, skill)  serve_eff(evaluation, skill)  reception_eff(evaluation, skill)"},{"path":"/reference/attack_eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various skill performance indicators — attack_eff","text":"evaluation character: vector skill evaluations (\"Winning attack\", \"Error\", etc) skill character: (optional) vector skill values (\"Attack\", \"Block\", etc). provided, used filter evaluation vector elements corresponding correct skill. provided, elements evaluation used","code":""},{"path":"/reference/attack_eff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various skill performance indicators — attack_eff","text":"numeric scalar","code":""},{"path":"/reference/attack_eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various skill performance indicators — attack_eff","text":"","code":"if (FALSE) {  library(dplyr)  x <- ovdata_example(\"mlafin_braslovce_nkbm\", as = \"parsed\")  plays(x) %>% dplyr::filter(skill == \"Attack\") %>% group_by(player_name) %>%    dplyr::summarize(N_attacks = n(), att_eff = attack_eff(evaluation)) }"},{"path":"/reference/ov_aev.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate attack evenness — ov_aev","title":"Calculate attack evenness — ov_aev","text":"Attack evenness measure balanced team's attack . Teams rely heavily one two attackers relatively low evenness value, whereas teams use attackers higher. See https://untan.gl/attack-evenness.html background. Evenness calculated lineup used team averaged (weighting number attacks lineup made) get overall evenness value. Liberos expected attack, setter attacks (dumps) ignored. Evenness can calculated grouped data: default, calculated match averaged matches reporting final result.","code":""},{"path":"/reference/ov_aev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate attack evenness — ov_aev","text":"","code":"ov_aev(   x,   team,   rotation,   reference_props = NULL,   calculate_by = \"match_id\",   report_by,   min_N_attacks = 10,   detail = FALSE )"},{"path":"/reference/ov_aev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate attack evenness — ov_aev","text":"x data.frame: plays data.frame returned datavolley::read_dv() peranavolley::pv_read() team string: team calculate attack evenness . provided, calculated separately teams x rotation string: calculation needs know position player playing, can work many attacks player made \"perfectly even attack\" scenario. important middle hitters, usually replaced libero back court therefore make attacks times. rotation parameter can one : \"player_role\": use player roles specified \"player_role\" column x. typically player roles defined roster, left user populate column \"SHM\": assume setter-hitter-middle rotation order (.e. outside hitter position 2 setter 1) infer player roles \"SMH\": assume setter-middle-hitter rotation order infer player roles \"none\": assume player roles, mean \"perfectly even attack\" scenario, player (excluding setter) expected make 20% attacks. option probably limited use reference_props data.frame NULL: NULL, default attack profile used (recommended). Otherwise, data.frame columns player_role p_expected, player roles \"middle\", \"outside\", \"opposite\" p_expected gives proportion attacks players expected make (team attacking perfectly even attack profile) calculate_by character: names variables x group calculations. Note \"lineup\" always used calculation grouping variable (populated inside function). See Details report_by character: names variables x group final results. Note results always effectively grouped team. report_by variables used addition team. Note : report_by can include \"lineup\" /\"setter_id\" (variables used internally calculations) report_by variables must also present calculate_by, exception \"lineup\" \"setter_id\" min_N_attacks integer: minimum number attacks must made order included calculations. Attacks counted lineup calculate_by variables (). calculate_by empty min_N_attacks 10, lineups made 10 attacks (total) included calculations. min_N_attacks 10 calculate_by \"match_id\", calculations done match match, using lineups match made 10 attacks match detail logical: TRUE, returned data frame include additional columns: \"aev_sd\" (standard deviation aev across calculate_by groups), \"rally_win_rate\", \"kill_rate\", \"rec_eff\" (reception efficiency), \"N_rallies\" (number rallies played). Note including details makes calculation noticeably slower","code":""},{"path":"/reference/ov_aev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate attack evenness — ov_aev","text":"tibble least columns \"team\", \"aev\", \"N_attacks\". detail TRUE, additional columns also present (see detail parameter)","code":""},{"path":"/reference/ov_aev.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate attack evenness — ov_aev","text":"Note calculation group averaging generally give results calculating average result one step (e.g. calculating several matches averaging results probably give answer calculating matches pooled). expected: say team -utilizes particular hitter one match, -utilizes another. matches team's evenness low, averaging results indicate average team uneven. pool data two matches, -utilization first match might balanced -utilization second match, giving higher attack evenness.","code":""},{"path":"/reference/ov_aev.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate attack evenness — ov_aev","text":"https://untan.gl/attack-evenness.html","code":""},{"path":"/reference/ov_aev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate attack evenness — ov_aev","text":"","code":"px <- plays(dv_read(ovdata_example()))  ## for a single team ov_aev(px, rotation = \"SHM\", team = \"GKS Katowice\") #> # A tibble: 1 × 4 #>   team         aev_sd   aev N_attacks #>   <chr>         <dbl> <dbl>     <int> #> 1 GKS Katowice 0.0454 0.863        99  ## for all teams in px, and with extra detail ov_aev(px, rotation = \"SHM\", detail = TRUE) #> # A tibble: 2 × 8 #>   team         aev_sd   aev rally_win_rate kill_rate rec_eff N_attacks N_rallies #>   <chr>         <dbl> <dbl>          <dbl>     <dbl>   <dbl>     <int>     <int> #> 1 GKS Katowice 0.0454 0.863          0.711     0.455   0.338        99        76 #> 2 MKS Będzin   0.0241 0.750          0.578     0.4     0.372       125        90  ## for a single team, calculated by set number but aggregate results when reporting ov_aev(px, team = \"GKS Katowice\", rotation = \"SHM\", calculate_by = \"set_number\") #> # A tibble: 1 × 4 #>   team         aev_sd   aev N_attacks #>   <chr>         <dbl> <dbl>     <int> #> 1 GKS Katowice 0.0728 0.810        99  ## for a single team, calculated and reported by set number ov_aev(px, team = \"GKS Katowice\", rotation = \"SHM\", calculate_by = \"set_number\",        report_by = \"set_number\") #> # A tibble: 5 × 5 #>   set_number team         aev_sd   aev N_attacks #>        <int> <chr>         <dbl> <dbl>     <int> #> 1          1 GKS Katowice 0      0.891        23 #> 2          2 GKS Katowice 0      0.8          20 #> 3          3 GKS Katowice 0      0.831        17 #> 4          4 GKS Katowice 0.0659 0.712        25 #> 5          5 GKS Katowice 0      0.839        14"},{"path":"/reference/ov_augment_plays.html","id":null,"dir":"Reference","previous_headings":"","what":"Add some extra columns to a plays object — ov_augment_plays","title":"Add some extra columns to a plays object — ov_augment_plays","text":"Add extra columns plays object","code":""},{"path":"/reference/ov_augment_plays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add some extra columns to a plays object — ov_augment_plays","text":"","code":"ov_augment_plays(   x,   to_add = c(\"receiving_team\", \"touch_summaries\", \"setters\"),   rotation = \"SHM\",   use_existing = TRUE )"},{"path":"/reference/ov_augment_plays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add some extra columns to a plays object — ov_augment_plays","text":"x data.frame: plays data.frame returned datavolley::read_dv() peranavolley::pv_read() to_add character: columns add \"receiving_team\" adds columns \"receiving_team\" (team name) \"receiving_team_id\" \"winners\" adds columns \"set_won_by\", \"set_won_by_id\" (name ID team won current set), \"match_won_by\", \"match_won_by_id\" (name ID team won current match), \"team_won_set\" \"team_won_match\" (team making action current row win set/match), \"home_sets_won\" \"visiting_sets_won\" (number sets won home visiting teams) \"touch_summaries\" adds number columns named \"ts_*\" summarize team touch (e.g. columns \"ts_pass_quality\", \"ts_pass_evaluation_code\" give pass quality pass evaluation code reception dig associated given team touch). \"touch_summaries\" also adds column named freeball_over, disambiguates action putting freeball net action digging ball. Many scouts code \"Freeball\". freeball_over column TRUE freeball put net, FALSE otherwise (including freeball digs). Freeballs freeball digs still \"Freeball\" skill column \"setters\" adds columns \"home_setter_id\", \"visiting_setter_id\" (player IDs home visiting setter court), \"setter_id\", \"setter_position\", \"setter_front_back\" (player ID position setter team performing current action) \"followed\" adds columns \"followed_timeout\", \"followed_technical_timeout\", \"followed_sub\" \"player_role\" add column \"player_role\" gives role (outside, middle, opposite, setter) active player row x. assumes standard rotation specified rotation. Note player_role include libero, although can inferred meta component full datavolley object \"\" shortcut rotation string: (relevant to_add includes \"player_role\") either \"SHM\" (assume setter-hitter-middle rotation order, .e. outside hitter position 2 setter 1), \"SMH\" (setter-middle-hitter) use_existing logical: TRUE columns associated given to_add choice already present x, re-generated","code":""},{"path":"/reference/ov_augment_plays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add some extra columns to a plays object — ov_augment_plays","text":"x extra columns added","code":""},{"path":"/reference/ov_create_history_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"Create prior table dvw directory dvw files","code":""},{"path":"/reference/ov_create_history_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"","code":"ov_create_history_table(   dvw,   play_phase = c(\"Reception\", \"Transition\"),   attack_by = \"code\",   setter_position_by = \"rotation\",   exclude_attacks = c(\"PR\"),   normalize_parameters = TRUE )"},{"path":"/reference/ov_create_history_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"dvw string: path one datavolley files, list one datavolley objects, directory containing datavolley files play_phase character: one \"Reception\", \"Transition\" attack_by string: either \"code\", \"zone\", \"tempo\" \"setter call\" setter_position_by string: either \"rotation\", \"front_back\" exclude_attacks character: vector attack codes exclude normalize_parameters logical: reduce prior parameter values","code":""},{"path":"/reference/ov_create_history_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"list, currently one component named \"prior_table\"","code":""},{"path":"/reference/ov_create_history_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a prior table from a dvw or a directory of dvw files — ov_create_history_table","text":"","code":"## use this file to create the priors hist_dvw <- ovdata_example(\"NCA-CUB\") history_table <- ov_create_history_table(dvw = hist_dvw, attack_by = \"setter call\",                                    setter_position_by = \"front_back\")  ## use it on another file (here, the same file for demo purposes) ## usually the history would be from a reference set of previous matches  dvw <- ovdata_example(\"NCA-CUB\") setter <- ov_simulate_setter_distribution(dvw = dvw, play_phase = \"Reception\", n_sim = 100,                                   attack_by = \"setter call\", attack_options = \"use_history\",                                   setter_position_by = \"front_back\",                                   history_table = history_table, filter_sim = TRUE)  ## plot the results ov_plot_ssd(setter, overlay_set_number = TRUE)  ov_plot_distribution(setter) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_tile()`). #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_text()`). #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_tile()`). #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"/reference/ov_example_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"Example DataVolley files provided part ovlytics package","code":""},{"path":"/reference/ov_example_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"","code":"ov_example_file(choice = \"190301_kats_beds\")"},{"path":"/reference/ov_example_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"choice string: data file return? \"190301_kats_beds\" - match GKS Katowice MKS Bedzin 2018/19 Polish Plus Liga","code":""},{"path":"/reference/ov_example_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"path file","code":""},{"path":"/reference/ov_example_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example DataVolley files provided as part of the ovlytics package — ov_example_file","text":"","code":"myfile <- ov_example_file() x <- dv_read(myfile) summary(x) #> Match summary: #> Date: 2019-01-03 #> League: Plus Liga 2018/2019 - Plus Liga 2018/20189- Faza Zasadnicza #> Teams: GKS Katowice (Gruszka Piotr/Słaby Grzegorz) #>        vs #>        MKS Będzin (Siewiorek Emil) #> Result: 3-2 (25-20, 18-25, 25-15, 19-25, 15-6) #> Duration: 114 minutes"},{"path":"/reference/ov_heatmap_kde.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"Kernel density estimates volleyball heatmaps","code":""},{"path":"/reference/ov_heatmap_kde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"","code":"ov_heatmap_kde(   x,   y,   N = NULL,   resolution = \"coordinates\",   bw,   n,   court = \"full\",   auto_flip = FALSE )"},{"path":"/reference/ov_heatmap_kde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"x : either numeric vector x-locations, three-column data.frame matrix columns x, y, optionally N. x grouped tibble, kernel density estimates calculated separately group y numeric: (unless x data.frame matrix) numeric vector y-locations N numeric: (unless x data.frame matrix) numeric vector counts associated location (corresponding location observed N times) resolution string: resolution locations, either \"coordinates\" \"subzones\" bw numeric: vector bandwidths use x- y-directions (see MASS::kde2d()). provided, default values used based location resolution n integer: (scalar length-2 integer vector) number grid points direction. provided, 60 points x-direction 60 (half-court) 120 points y-direction used court string: \"full\" (generate kernel density estimate full court) \"lower\" \"upper\" (lower upper half court) auto_flip logical: TRUE, court either \"lower\" \"upper\", locations corresponding non-selected half court flipped. might appropriate , example, heatmap represents attack end locations scouted coordinates (necessarily aligned end court default)","code":""},{"path":"/reference/ov_heatmap_kde.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"data.frame columns x, y, density","code":""},{"path":"/reference/ov_heatmap_kde.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel density estimates for volleyball heatmaps — ov_heatmap_kde","text":"","code":"library(ggplot2) library(datavolley)  ## Example 1 - by coordinates ## generate some fake coordinate data Na <- 20 set.seed(17) px <- data.frame(x = c(runif(Na, min = 0.4, max = 1.2), runif(Na, min = 2, max = 3)),                  y = c(runif(Na, min = 4.5, max = 6.6), runif(Na, min = 4.9, max = 6.6)))  ## plot as points ggplot(px, aes(x, y)) + ggcourt(labels = NULL, court = \"upper\") +        geom_point(colour = \"dodgerblue\")   ## or as a heatmap hx <- ov_heatmap_kde(px, resolution = \"coordinates\", court = \"upper\") #> Warning: row names were found from a short variable and have been discarded ggplot(hx, aes(x, y, fill = density)) +        scale_fill_distiller(palette = \"Purples\", direction = 1, labels = NULL,                             name = \"Attack\\ndensity\") +        geom_raster() + ggcourt(labels = NULL, court = \"upper\")   ## Example 2 - by subzones, with data from two attackers ## generate some fake data Na <- 20 set.seed(17) px <- data.frame(zone = sample(c(1, 5:9), Na * 2, replace = TRUE),                  subzone = sample(c(\"A\", \"B\", \"C\", \"D\"), Na * 2, replace = TRUE),                  attacker = c(rep(\"Attacker 1\", Na), rep(\"Attacker 2\", Na)))  ## convert to x, y coordinates px <- cbind(px, dv_xy(zones = px$zone, end = \"upper\", subzone = px$subzone))  ## plot as tiles library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union ggplot(count(px, attacker, x, y), aes(x, y, fill = n)) + geom_tile() +        facet_wrap(~attacker) + ggcourt(labels = NULL, court = \"upper\")   ## or as a heatmap, noting that we group the data by attacker first hx <- ov_heatmap_kde(group_by(px, attacker), resolution = \"subzones\", court = \"upper\") ggplot(hx, aes(x, y, fill = density)) + facet_wrap(~attacker) +        scale_fill_distiller(palette = \"Purples\", direction = 1, labels = NULL,                             name = \"Attack\\ndensity\") +        geom_raster() + ggcourt(labels = NULL, court = \"upper\")"},{"path":"/reference/ov_infer_player_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer the role of each player — ov_infer_player_roles","title":"Infer the role of each player — ov_infer_player_roles","text":"Infer role player","code":""},{"path":"/reference/ov_infer_player_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer the role of each player — ov_infer_player_roles","text":"","code":"ov_infer_player_roles(   x,   target_team,   method,   fall_back = TRUE,   setter_tip_codes = c(\"PP\") )"},{"path":"/reference/ov_infer_player_roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer the role of each player — ov_infer_player_roles","text":"x : datavolley object (returned datavolley::dv_read()), list datavolley objects, plays component datavolley object target_team string function: team report . function, return TRUE passed target team name method string: \"meta\" (rely player metadata), \"SHM\" (assume setter-hitter-middle rotation order), \"SMH\" (setter-middle-hitter), \"data\" (figure positions scouting data). Method \"meta\" default datavolley object list objects provided fall_back logical: TRUE method \"meta\" x single datavolley object player roles provided DataVolley file metadata section, fall back method=\"data\" setter_tip_codes character: vector attack combination codes correspond setter tips","code":""},{"path":"/reference/ov_infer_player_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer the role of each player — ov_infer_player_roles","text":"data.frame","code":""},{"path":"/reference/ov_infer_player_roles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer the role of each player — ov_infer_player_roles","text":"","code":"x <- ovdata_example(\"mlafin_braslovce_nkbm\", as = \"parsed\") ## guess roles according to the actions that the players made rx <- ov_infer_player_roles(x, target_team = \"Nova KBM Branik\", method = \"data\")"},{"path":"/reference/ov_plot_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Court plot of a real and simulated setter distribution — ov_plot_distribution","title":"Court plot of a real and simulated setter distribution — ov_plot_distribution","text":"Court plot real simulated setter distribution","code":""},{"path":"/reference/ov_plot_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Court plot of a real and simulated setter distribution — ov_plot_distribution","text":"","code":"ov_plot_distribution(   ssd,   label_setters_by = \"id\",   font_size = 11,   title_wrap = NA,   output = \"plot\" )"},{"path":"/reference/ov_plot_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Court plot of a real and simulated setter distribution — ov_plot_distribution","text":"ssd simulated setter distribution output returned ov_simulate_setter_distribution() label_setters_by string: either \"id\" \"name\" font_size numeric: font size title_wrap numeric: non-NA, use strwrap() break title lines width output string: either \"plot\" \"list\"","code":""},{"path":"/reference/ov_plot_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Court plot of a real and simulated setter distribution — ov_plot_distribution","text":"","code":"dvw <- ovdata_example(\"NCA-CUB\") setter <- ov_simulate_setter_distribution(dvw = dvw, play_phase = c(\"Reception\", \"Transition\"),                                           n_sim = 100, attack_by = \"code\") ov_plot_distribution(setter) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_segment()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_text()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_segment()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"/reference/ov_plot_history_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the prior table — ov_plot_history_table","title":"Plot the prior table — ov_plot_history_table","text":"Plot prior table","code":""},{"path":"/reference/ov_plot_history_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the prior table — ov_plot_history_table","text":"","code":"ov_plot_history_table(history_table, team, setter_id)"},{"path":"/reference/ov_plot_history_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the prior table — ov_plot_history_table","text":"history_table data.frame: prior_table component object returned ov_create_history_table() team string: team name setter_id string: setter_id","code":""},{"path":"/reference/ov_plot_history_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the prior table — ov_plot_history_table","text":"","code":"hist_dvw <- ovdata_example(\"NCA-CUB\") history_table <- ov_create_history_table(dvw = hist_dvw, attack_by = \"tempo\",                                                     setter_position_by = \"front_back\",                                                     normalize_parameters = FALSE) team = unique(history_table$prior_table$team)[1] setter_id = unique(history_table$prior_table$setter_id)[4] ov_plot_history_table(history_table, team, setter_id) #> Joining with `by = join_by(setter_front_back, skill_type)`"},{"path":"/reference/ov_plot_sequence_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","title":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","text":"Plot simulated setter distribution sequence","code":""},{"path":"/reference/ov_plot_sequence_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","text":"","code":"ov_plot_sequence_distribution(   ssd,   label_setters_by = \"id\",   font_size = 11,   title_wrap = NA,   split_set = FALSE,   output = \"plot\" )"},{"path":"/reference/ov_plot_sequence_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","text":"ssd simulated setter distribution output returned ov_simulate_setter_distribution() label_setters_by string: either \"id\" \"name\" font_size numeric: font size title_wrap numeric: non-NA, use strwrap() break title lines width split_set boolean: TRUE, separate distribution sequence set output string: either \"plot\" \"list\"","code":""},{"path":"/reference/ov_plot_sequence_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a simulated setter distribution sequence — ov_plot_sequence_distribution","text":"","code":"dvw <- ovdata_example(\"NCA-CUB\") ssd <- ov_simulate_setter_distribution(dvw = dvw, play_phase = c(\"Reception\"),                                        n_sim = 100, attack_by = \"zone\",                                        setter_position_by = \"front_back\") ov_plot_sequence_distribution(ssd)"},{"path":"/reference/ov_plot_ssd.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a simulated setter distribution — ov_plot_ssd","title":"Plot a simulated setter distribution — ov_plot_ssd","text":"Plot simulated setter distribution","code":""},{"path":"/reference/ov_plot_ssd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a simulated setter distribution — ov_plot_ssd","text":"","code":"ov_plot_ssd(   ssd,   overlay_set_number = FALSE,   label_setters_by = \"name\",   font_size = 11 )"},{"path":"/reference/ov_plot_ssd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a simulated setter distribution — ov_plot_ssd","text":"ssd simulated setter distribution output returned ov_simulate_setter_distribution() overlay_set_number boolean: TRUE, overlay set number score plot label_setters_by string: either \"id\" \"name\" font_size numeric: font size","code":""},{"path":"/reference/ov_plot_ssd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a simulated setter distribution — ov_plot_ssd","text":"","code":"dvw <- ovdata_example(\"NCA-CUB\") setter <- ov_simulate_setter_distribution(dvw = dvw,                                           n_sim = 150, attack_by = \"zone\") ov_plot_ssd(setter, overlay_set_number = TRUE)"},{"path":"/reference/ov_print_history_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the prior table — ov_print_history_table","title":"Print the prior table — ov_print_history_table","text":"Print prior table","code":""},{"path":"/reference/ov_print_history_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the prior table — ov_print_history_table","text":"","code":"ov_print_history_table(history_table, team, setter_id)"},{"path":"/reference/ov_print_history_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the prior table — ov_print_history_table","text":"history_table data.frame: prior_table component object returned ov_create_history_table() team string: team name setter_id string: setter_id","code":""},{"path":"/reference/ov_print_history_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the prior table — ov_print_history_table","text":"","code":"hist_dvw <- ovdata_example(\"NCA-CUB\") history_table <- ov_create_history_table(dvw = hist_dvw, attack_by = \"zone\") team = history_table$prior_table$team[1] setter_id = history_table$prior_table$setter_id[1] ov_print_history_table(history_table, team, setter_id) #> Warning: Since gt v0.6.0 `fmt_missing()` is deprecated and will soon be removed. #> ℹ Use `sub_missing()` instead. #> This warning is displayed once every 8 hours. #> Warning: Since gt v0.9.0, the `colors` argument has been deprecated. #> • Please use the `fn` argument instead. #> This warning is displayed once every 8 hours. #> <div id=\"dvfnpogsly\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#dvfnpogsly table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #dvfnpogsly thead, #dvfnpogsly tbody, #dvfnpogsly tfoot, #dvfnpogsly tr, #dvfnpogsly td, #dvfnpogsly th { #>   border-style: none; #> } #>  #> #dvfnpogsly p { #>   margin: 0; #>   padding: 0; #> } #>  #> #dvfnpogsly .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #dvfnpogsly .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #dvfnpogsly .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #dvfnpogsly .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #dvfnpogsly .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #dvfnpogsly .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #dvfnpogsly .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #dvfnpogsly .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #dvfnpogsly .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #dvfnpogsly .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #dvfnpogsly .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #dvfnpogsly .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #dvfnpogsly .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #dvfnpogsly .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #dvfnpogsly .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dvfnpogsly .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #dvfnpogsly .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #dvfnpogsly .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #dvfnpogsly .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dvfnpogsly .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #dvfnpogsly .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dvfnpogsly .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #dvfnpogsly .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dvfnpogsly .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #dvfnpogsly .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #dvfnpogsly .gt_left { #>   text-align: left; #> } #>  #> #dvfnpogsly .gt_center { #>   text-align: center; #> } #>  #> #dvfnpogsly .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #dvfnpogsly .gt_font_normal { #>   font-weight: normal; #> } #>  #> #dvfnpogsly .gt_font_bold { #>   font-weight: bold; #> } #>  #> #dvfnpogsly .gt_font_italic { #>   font-style: italic; #> } #>  #> #dvfnpogsly .gt_super { #>   font-size: 65%; #> } #>  #> #dvfnpogsly .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #dvfnpogsly .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #dvfnpogsly .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #dvfnpogsly .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #dvfnpogsly .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #dvfnpogsly .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #dvfnpogsly .gt_indent_5 { #>   text-indent: 25px; #> } #>  #> #dvfnpogsly .katex-display { #>   display: inline-flex !important; #>   margin-bottom: 0.75em !important; #> } #>  #> #dvfnpogsly div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { #>   height: 0px !important; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"\"><\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"3\">3<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"4\">4<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"2\">2<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"8\">8<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"9\">9<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr class=\"gt_group_heading_row\"> #>       <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"1\">1<\/th> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><th id=\"stub_1_1\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Perfect<\/th> #> <td headers=\"1 stub_1_1 3\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"1 stub_1_1 4\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"1 stub_1_1 2\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.0<\/td> #> <td headers=\"1 stub_1_1 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"1 stub_1_1 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><th id=\"stub_1_2\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Good<\/th> #> <td headers=\"1 stub_1_2 3\" class=\"gt_row gt_center\" style=\"background-color: #FFB84F; color: #000000;\">0.33<\/td> #> <td headers=\"1 stub_1_2 4\" class=\"gt_row gt_center\" style=\"background-color: #FFB84F; color: #000000;\">0.33<\/td> #> <td headers=\"1 stub_1_2 2\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"1 stub_1_2 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"1 stub_1_2 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><th id=\"stub_1_3\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Poor<\/th> #> <td headers=\"1 stub_1_3 3\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"1 stub_1_3 4\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"1 stub_1_3 2\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.0<\/td> #> <td headers=\"1 stub_1_3 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"1 stub_1_3 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"3\">3<\/th> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><th id=\"stub_1_4\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Perfect<\/th> #> <td headers=\"3 stub_1_4 3\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"3 stub_1_4 4\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"3 stub_1_4 2\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"3 stub_1_4 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"3 stub_1_4 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><th id=\"stub_1_5\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Good<\/th> #> <td headers=\"3 stub_1_5 3\" class=\"gt_row gt_center\" style=\"background-color: #FB8C00; color: #000000;\">0.67<\/td> #> <td headers=\"3 stub_1_5 4\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"3 stub_1_5 2\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.0<\/td> #> <td headers=\"3 stub_1_5 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"3 stub_1_5 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><th id=\"stub_1_6\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Poor<\/th> #> <td headers=\"3 stub_1_6 3\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"3 stub_1_6 4\" class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0.00<\/td> #> <td headers=\"3 stub_1_6 2\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"3 stub_1_6 8\" class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0<\/td> #> <td headers=\"3 stub_1_6 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"4\">4<\/th> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><th id=\"stub_1_7\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Perfect<\/th> #> <td headers=\"4 stub_1_7 3\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"4 stub_1_7 4\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"4 stub_1_7 2\" class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0.5<\/td> #> <td headers=\"4 stub_1_7 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"4 stub_1_7 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><th id=\"stub_1_8\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Good<\/th> #> <td headers=\"4 stub_1_8 3\" class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0.00<\/td> #> <td headers=\"4 stub_1_8 4\" class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0.50<\/td> #> <td headers=\"4 stub_1_8 2\" class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0.0<\/td> #> <td headers=\"4 stub_1_8 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"4 stub_1_8 9\" class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0.67<\/td><\/tr> #>     <tr><th id=\"stub_1_9\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Poor<\/th> #> <td headers=\"4 stub_1_9 3\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"4 stub_1_9 4\" class=\"gt_row gt_center\" style=\"background-color: #FFF3E0; color: #000000;\">0.00<\/td> #> <td headers=\"4 stub_1_9 2\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"4 stub_1_9 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"4 stub_1_9 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"5\">5<\/th> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><th id=\"stub_1_10\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Perfect<\/th> #> <td headers=\"5 stub_1_10 3\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"5 stub_1_10 4\" class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0.50<\/td> #> <td headers=\"5 stub_1_10 2\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.0<\/td> #> <td headers=\"5 stub_1_10 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"5 stub_1_10 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><th id=\"stub_1_11\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Good<\/th> #> <td headers=\"5 stub_1_11 3\" class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0.50<\/td> #> <td headers=\"5 stub_1_11 4\" class=\"gt_row gt_center\" style=\"background-color: #F78000; color: #FFFFFF;\">0.75<\/td> #> <td headers=\"5 stub_1_11 2\" class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0.5<\/td> #> <td headers=\"5 stub_1_11 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"5 stub_1_11 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"2\">2<\/th> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><th id=\"stub_1_12\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Good<\/th> #> <td headers=\"2 stub_1_12 3\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"2 stub_1_12 4\" class=\"gt_row gt_center\" style=\"background-color: #FFB84F; color: #000000;\">0.33<\/td> #> <td headers=\"2 stub_1_12 2\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"2 stub_1_12 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"2 stub_1_12 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><th id=\"stub_1_13\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Poor<\/th> #> <td headers=\"2 stub_1_13 3\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"2 stub_1_13 4\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"2 stub_1_13 2\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"2 stub_1_13 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"2 stub_1_13 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr class=\"gt_group_heading_row\"> #>       <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"6\">6<\/th> #>     <\/tr> #>     <tr class=\"gt_row_group_first\"><th id=\"stub_1_14\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Good<\/th> #> <td headers=\"6 stub_1_14 3\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"6 stub_1_14 4\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"6 stub_1_14 2\" class=\"gt_row gt_center\" style=\"background-color: #FFA018; color: #000000;\">0.5<\/td> #> <td headers=\"6 stub_1_14 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"6 stub_1_14 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>     <tr><th id=\"stub_1_15\" scope=\"row\" class=\"gt_row gt_center gt_stub\">Poor<\/th> #> <td headers=\"6 stub_1_15 3\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"6 stub_1_15 4\" class=\"gt_row gt_center\" style=\"background-color: #E65100; color: #FFFFFF;\">1.00<\/td> #> <td headers=\"6 stub_1_15 2\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"6 stub_1_15 8\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td> #> <td headers=\"6 stub_1_15 9\" class=\"gt_row gt_center\" style=\"background-color: #FFFFFF; color: #000000;\">.<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>"},{"path":"/reference/ov_print_rate_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the rate table — ov_print_rate_table","title":"Print the rate table — ov_print_rate_table","text":"Print rate table","code":""},{"path":"/reference/ov_print_rate_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the rate table — ov_print_rate_table","text":"","code":"ov_print_rate_table(ssd, team, setter_id)"},{"path":"/reference/ov_print_rate_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the rate table — ov_print_rate_table","text":"ssd simulated setter distribution output returned ov_simulate_setter_distribution() team string: team name setter_id string: setter_id","code":""},{"path":"/reference/ov_print_rate_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the rate table — ov_print_rate_table","text":"","code":"dvw <- ovdata_example(\"NCA-CUB\") system.time({   ssd <- ov_simulate_setter_distribution(dvw = dvw, play_phase = \"Reception\",                                          n_sim = 500, setter_position_by = \"front_back\")   team <- ssd$raw_data$meta$teams$team[1]   setter_id <- ssd$raw_data$meta$players_h$player_id[which(ssd$raw_data$meta$players_h$role == \"setter\")][1]   ov_print_rate_table(ssd, team, setter_id) }) #>    user  system elapsed  #>   7.997   0.008   8.007"},{"path":"/reference/ov_season_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary table of a team's matches in a season — ov_season_table","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"Create summary table team's matches season","code":""},{"path":"/reference/ov_season_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"","code":"ov_season_table(xl, target_team, target_team_id, show_by = \"match date\")"},{"path":"/reference/ov_season_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"xl list: list datavolley objects (returned datavolley::dv_read() target_team string: name target team. one target_team target_team_id required target_team_id string: team ID target team. Ignored target_team provided show_by string: either \"match date\" (show match according date) \"filename\" (show match according filename. might useful match dates parsed incorrectly datavolley::dv_read())","code":""},{"path":"/reference/ov_season_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"tibble columns \"Opponent\", \"Date\" (\"File\"), \"Result\", \"Set scores\", one column sets 1 5","code":""},{"path":"/reference/ov_season_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a summary table of a team's matches in a season — ov_season_table","text":"","code":"## trivial example of a single-match \"season\" library(datavolley) x <- dv_read(dv_example_file()) ov_season_table(list(x), target_team = home_team(x)) #> # A tibble: 1 × 10 #>   Opponent    Date       Result `Set scores` `W/L` `1`   `2`   `3`   `4`   `5`   #>   <chr>       <date>     <chr>  <chr>        <lgl> <chr> <chr> <chr> <chr> <chr> #> 1 Nova KBM B… 2015-01-25 3-0    25-16, 25-1… TRUE  S-3*  R-3*  S-3*  -     -"},{"path":"/reference/ov_setter_repetition.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate setter repeat patterns — ov_setter_repetition","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"Note: analysis done basis attack actions, simply assumes setter court made set.","code":""},{"path":"/reference/ov_setter_repetition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"","code":"ov_setter_repetition(   x,   setter_id,   setter_name,   exclude_attacks = c(\"PP\", \"PR\", \"P2\"),   exclude_negative_reception = TRUE,   exclude_highballs = FALSE )"},{"path":"/reference/ov_setter_repetition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"x data.frame: plays data.frame returned datavolley::read_dv() peranavolley::pv_read() setter_id string: (optional) player ID setter analyze (provide setter_name). neither setter_id setter_name provided, setters analyzed separately, collated results returned setter_name string: (optional) name setter analyze (ignored setter_id provided). neither setter_id setter_name provided, setters analyzed separately, collated results returned exclude_attacks character: vector attack codes exclude exclude_negative_reception logical: TRUE, exclude attacks following poor reception (likely --system therefore might represent attacks setter genuine options) exclude_highballs logical: TRUE, exclude highball attacks (likely --system therefore might represent attacks setter genuine options)","code":""},{"path":"/reference/ov_setter_repetition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"data.frame columns \"team\", \"setter_name\", \"setter_id\", \"player_name\", \"player_id\", \"category\", \"opportunities\", \"repeats\", \"repeat%\"","code":""},{"path":"/reference/ov_setter_repetition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate setter repeat patterns — ov_setter_repetition","text":"","code":"x <- plays(ovdata_example(\"NCA-CUB\", as = \"parsed\")) set_reps <- ov_setter_repetition(x, setter_name = \"LOLETTE RODRIGUEZ\")  library(ggplot2) ggplot(set_reps, aes(x = player_name, y = `repeat%`)) + geom_col() +     geom_text(aes(x = player_name, label = paste0(\"N=\", opportunities)),               angle = 90, y = 100, hjust = 1, inherit.aes = FALSE) +     facet_wrap(~category) +     theme_bw() +     theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1)) +     labs(x = NULL, y = \"Repeat percentage\") #> Warning: Removed 14 rows containing missing values or values outside the scale range #> (`geom_col()`)."},{"path":"/reference/ov_simulate_multiple_setter_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points for multiple games — ov_simulate_multiple_setter_distribution","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points for multiple games — ov_simulate_multiple_setter_distribution","text":"Simulate Bayesian Bandit choice given set probabilities number points multiple games","code":""},{"path":"/reference/ov_simulate_multiple_setter_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points for multiple games — ov_simulate_multiple_setter_distribution","text":"","code":"ov_simulate_multiple_setter_distribution(   list_dv,   play_phase = c(\"Reception\", \"Transition\"),   n_sim = 500,   priors = list(name = \"beta\", par1 = 1, par2 = 1),   epsilon = 1,   filter_sim = FALSE,   attack_options = \"use_data\",   setter_position_by = \"rotation\",   history_table = NULL,   attack_by = \"code\",   exclude_attacks = c(\"PR\"),   rotation = \"SHM\",   shiny_progress = NULL )"},{"path":"/reference/ov_simulate_multiple_setter_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points for multiple games — ov_simulate_multiple_setter_distribution","text":"list_dv list: list datavolley object returned datavolley::dv_read() play_phase character: one \"Reception\", \"Transition\" n_sim integer: number simulations priors numeric: prior distribution kill rate different attacking options epsilon numeric: reward size filter_sim logical: attack_options string: either \"use_data\" \"use_history\" setter_position_by string: either \"rotation\" \"front_back\" history_table list: (attack_options \"use_history\") object returned ov_create_history_table() attack_by string: either \"code\", \"zone\", \"tempo\", \"setter call\", \"attacker_name\", \"player_role\" exclude_attacks character: vector attack codes exclude rotation string: (relevant attack_by \"player_role\") either \"SHM\" (assume setter-hitter-middle rotation order), \"SMH\" (setter-middle-hitter) shiny_progress numeric: optional two-element vector. NULL NA, shiny::setProgress() calls made simulation values range","code":""},{"path":[]},{"path":"/reference/ov_simulate_multiple_setter_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points for multiple games — ov_simulate_multiple_setter_distribution","text":"","code":"list_dv <- list(dv_read(ovdata_example(\"NCA-CUB\"))) system.time({   mssd <- ov_simulate_multiple_setter_distribution(list_dv = list_dv, play_phase = \"Reception\",                n_sim = 100, setter_position_by = \"front_back\") }) #>    user  system elapsed  #>   0.523   0.005   0.529"},{"path":"/reference/ov_simulate_setter_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","text":"Simulate Bayesian Bandit choice given set probabilities number points","code":""},{"path":"/reference/ov_simulate_setter_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","text":"","code":"ov_simulate_setter_distribution(   dvw,   play_phase = c(\"Reception\", \"Transition\"),   n_sim = 500,   priors = list(name = \"beta\", par1 = 1, par2 = 1),   epsilon = 1,   filter_sim = FALSE,   attack_options = \"use_data\",   setter_position_by = \"rotation\",   history_table = NULL,   attack_by = \"code\",   exclude_attacks = c(\"PR\"),   rotation = \"SHM\",   shiny_progress = NULL )"},{"path":"/reference/ov_simulate_setter_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","text":"dvw string datavolley: datavolley object returned datavolley::dv_read() path datavolley file play_phase character: one \"Reception\", \"Transition\" n_sim integer: number simulations priors numeric: prior distribution kill rate different attacking options epsilon numeric: reward size filter_sim logical: attack_options string: either \"use_data\" \"use_history\" setter_position_by string: either \"rotation\" \"front_back\" history_table list: (attack_options \"use_history\") object returned ov_create_history_table() attack_by string: either \"code\", \"zone\", \"tempo\", \"setter call\", \"attacker_name\", \"player_role\" exclude_attacks character: vector attack codes exclude rotation string: (relevant attack_by \"player_role\") either \"SHM\" (assume setter-hitter-middle rotation order), \"SMH\" (setter-middle-hitter) shiny_progress numeric: optional two-element vector. NULL NA, shiny::setProgress() calls made simulation values range","code":""},{"path":[]},{"path":"/reference/ov_simulate_setter_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Bayesian Bandit choice for a given set of probabilities and a number of points — ov_simulate_setter_distribution","text":"","code":"dvw <- ovdata_example(\"NCA-CUB\") system.time({   ssd <- ov_simulate_setter_distribution(dvw = dvw, play_phase = \"Reception\",                                          n_sim = 100, attack_by = \"setter call\",                                          setter_position_by = \"front_back\") }) #>    user  system elapsed  #>   2.915   0.002   2.917"},{"path":"/reference/ov_sort_attack_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort DataVolley attack codes — ov_sort_attack_codes","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"Sort DataVolley attack codes","code":""},{"path":"/reference/ov_sort_attack_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"","code":"ov_sort_attack_codes(ac, by = \"XV\", na.last = NA)"},{"path":"/reference/ov_sort_attack_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"ac character: character vector attack codes sort string: method use, currently \"XV\" (value default back using sort without modification). \"XV\" place X V codes first (numerical order, X preceding matching V) everything else alphabetical order na.last logical: passed sort","code":""},{"path":"/reference/ov_sort_attack_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"Sorted character vector","code":""},{"path":"/reference/ov_sort_attack_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort DataVolley attack codes — ov_sort_attack_codes","text":"","code":"ov_sort_attack_codes(c(\"V5\", \"V1\", \"X6\", \"CF\", \"X5\")) #> [1] \"V1\" \"X5\" \"V5\" \"X6\" \"CF\"  if (FALSE) {   ## sorting might be useful for controlling the plot order when facetting   ##  a `ggplot` by attack code   mydata$attack_code <- factor(mydata$attack_code,             levels = ov_sort_attack_codes(unique(na.omit(mydata$attack_code))))   ggplot(mydata, ...) + facet_wrap(~attack_code) }"},{"path":"/reference/ov_table_mssd.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of a simulated multi-game setter distribution sequence — ov_table_mssd","title":"Table of a simulated multi-game setter distribution sequence — ov_table_mssd","text":"Table simulated multi-game setter distribution sequence","code":""},{"path":"/reference/ov_table_mssd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of a simulated multi-game setter distribution sequence — ov_table_mssd","text":"","code":"ov_table_mssd(mssd, label_setters_by = \"name\", team = NULL, nrows = 50)"},{"path":"/reference/ov_table_mssd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of a simulated multi-game setter distribution sequence — ov_table_mssd","text":"mssd simulated multi-game setter distribution output returned ov_simulate_multiple_setter_distribution() label_setters_by string: either \"id\" \"name\" team NULL string: non-NULL, show sequence just team name nrows integer: number rows per page table","code":""},{"path":"/reference/ov_table_mssd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of a simulated multi-game setter distribution sequence — ov_table_mssd","text":"","code":"if (FALSE) {  list_dv <- list(dv_read(ovdata_example(\"NCA-CUB\"))) # would normally be multiple games  mssd <- ov_simulate_multiple_setter_distribution(list_dv = list_dv,              play_phase = c(\"Reception\", \"Transition\"), attack_by = \"player_role\",              n_sim = 100, setter_position_by = \"front_back\")   res <- ov_table_mssd(mssd, team = \"NICARAGUA\") }"},{"path":"/reference/ovlytics.html","id":null,"dir":"Reference","previous_headings":"","what":"ovlytics — ovlytics","title":"ovlytics — ovlytics","text":"Analytical functions volleyball analytics, used conjunction datavolley peranavolley packages.","code":""},{"path":[]},{"path":"/reference/ovlytics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ovlytics — ovlytics","text":"Maintainer: Ben Raymond ben@untan.gl Authors: Adrien Ickowicz contributors: openvolley.org [originator]","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. datavolley dv_read, plays dplyr %>% ovdata ovdata_example","code":""}]
